{"version":3,"sources":["webpack:///../@narative/gatsby-theme-novela/src/sections/topic/Topic.Articles.tsx","webpack:///../@narative/gatsby-theme-novela/src/sections/articles/Articles.List.tsx","webpack:///../@narative/gatsby-theme-novela/src/templates/topic.template.tsx","webpack:///../@narative/gatsby-theme-novela/src/components/TopicsList/Topics.List.tsx","webpack:///../@narative/gatsby-theme-novela/src/sections/topics/Topics.Hero.tsx","webpack:///../@narative/gatsby-theme-novela/src/components/Navigation/Navigation.Paginator.tsx"],"names":["TopicArticles","articles","TopicArticlesContainer","alwaysShowAllDetails","mediaqueries","desktop_medium","desktop","ArticlesList","hasOnlyOneArticle","length","useContext","GridLayoutContext","gridLayout","hasSetGridLayout","getGridLayout","articlePairs","reduce","result","value","index","array","push","slice","useEffect","ArticlesListContainer","style","opacity","map","ap","isEven","isOdd","List","key","reverse","ListItem","article","narrow","hasOverflow","title","imageSource","hero","regular","hasHeroImage","Object","keys","constructor","ArticleLink","to","slug","data-a11y","Item","ImageContainer","src","ArticleContent","ArticleTaxonomy","className","categories","topic","Title","dark","MetaData","date","timeToRead","limitToTwoLines","css","phablet","showDetails","p","listTile","wide","tablet","listItemRow","theme","colors","card","listItemTile","listRow","Headings","h2","fonts","serif","primary","grey","lightGrey","sansSerif","Link","accent","ArticlesPage","location","pageContext","additionalContext","topics","group","pathname","name","description","bio","TopicPaginator","gradient","colorModeTransition","TopicsList","selectedTopic","useState","isOpen","setIsOpen","fill","useColorMode","hasSelectedTopic","topicsBlank","id","avatar","topicsPage","featured","color","topicsWithDefaultAll","TopicsContainer","onClick","CoTopicsList","NameContainer","IconContainer","ToggleOpen","onOutsideClick","CoTopicsListOpen","IconOpenContainer","ToggleClose","CoTopicsListItemOpen","TopicLink","as","TopicNameOpen","background","secondary","TopicsHero","setGridLayout","site","edges","node","siteMetadata","Section","relative","HeadingContainer","HeroHeading","HeroHeadingLabel","hover","active","Paginator","maxPages","count","props","pageCount","current","pageRoot","pathPrefix","getFullPath","n","render","this","previousPath","nextPath","hasNext","hasPrevious","rel","href","Frame","PageButton","getPageLinks","MobileReference","aria-hidden","previousPage","pagesRange","range","truncatedRange","unshift","splice","Set","page","i","Spacer","PageNumberBUtton","Component","paginationItemMixin","desktop_up"],"mappings":"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","file":"component---narative-gatsby-theme-novela-src-templates-topic-template-tsx-581fb2ca4451e00d399e.js","sourcesContent":["import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nimport mediaqueries from \"@styles/media\";\nimport { IArticle } from \"@types\";\n\nimport ArticlesList from \"../articles/Articles.List\";\n\ninterface TopicArticlesProps {\n  articles: IArticle[];\n}\n\nconst TopicArticles: React.FC<TopicArticlesProps> = ({ articles }) => {\n  return (\n    <TopicArticlesContainer>\n      <ArticlesList articles={articles} alwaysShowAllDetails />\n    </TopicArticlesContainer>\n  );\n};\n\nexport default TopicArticles;\n\nconst TopicArticlesContainer = styled.div`\n  // background: linear-gradient(\n  //   180deg,\n  //   ${p => p.theme.colors.card} 0%,\n  //   rgba(249, 250, 252, 0) 91.01%\n  // );\n  // border-radius: 8px;\n  // padding: 88px 98px;\n  position: relative;\n  z-index: 1;\n\n  ${mediaqueries.desktop_medium`\n    padding: 80px;\n  `}\n\n  ${mediaqueries.desktop`\n    padding: 0;\n    background: transparent;\n  `}\n`;\n","import React, { useContext, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport { css } from '@emotion/core';\nimport { Link } from 'gatsby';\n\nimport Headings from '@components/Headings';\nimport Image, { ImagePlaceholder } from '@components/Image';\n\nimport mediaqueries from '@styles/media';\nimport { IArticle } from '@types';\n\nimport { GridLayoutContext } from './Articles.List.Context';\nimport ArticleCategories from \"../article/Article.Categories\";\nimport ArticleTopics from \"../article/Article.Topics\";\n\n/**\n * Tiles\n * [LONG], [SHORT]\n * [SHORT], [LONG]\n * [SHORT], [LONG]\n *\n * or ------------\n *\n * Rows\n * [LONG]\n * [LONG]\n * [LONG]\n */\n\ninterface ArticlesListProps {\n  articles: IArticle[];\n  alwaysShowAllDetails?: boolean;\n}\n\ninterface ArticlesListItemProps {\n  article: IArticle;\n  narrow?: boolean;\n}\n\nconst ArticlesList: React.FC<ArticlesListProps> = ({\n  articles,\n  alwaysShowAllDetails,\n}) => {\n  if (!articles) return null;\n\n  const hasOnlyOneArticle = articles.length === 1;\n  const { gridLayout = 'tiles', hasSetGridLayout, getGridLayout } = useContext(\n    GridLayoutContext,\n  );\n\n  /**\n   * We're taking the flat array of articles [{}, {}, {}...]\n   * and turning it into an array of pairs of articles [[{}, {}], [{}, {}], [{}, {}]...]\n   * This makes it simpler to create the grid we want\n   */\n  const articlePairs = articles.reduce((result, value, index, array) => {\n    if (index % 2 === 0) {\n      result.push(array.slice(index, index + 2));\n    }\n    return result;\n  }, []);\n\n  useEffect(() => getGridLayout(), []);\n\n  return (\n    <ArticlesListContainer\n      style={{ opacity: hasSetGridLayout ? 1 : 0 }}\n      alwaysShowAllDetails={alwaysShowAllDetails}\n    >\n      {articlePairs.map((ap, index) => {\n        const isEven = index % 2 !== 0;\n        const isOdd = index % 2 !== 1;\n\n        return (\n          <List\n            key={index}\n            gridLayout={gridLayout}\n            hasOnlyOneArticle={hasOnlyOneArticle}\n            reverse={isEven}\n          >\n            <ListItem article={ap[0]} narrow={isEven} />\n            <ListItem article={ap[1]} narrow={isOdd} />\n          </List>\n        );\n      })}\n    </ArticlesListContainer>\n  );\n};\n\nexport default ArticlesList;\n\nconst ListItem: React.FC<ArticlesListItemProps> = ({ article, narrow }) => {\n  if (!article) return null;\n\n  //const { gridLayout } = useContext(GridLayoutContext);\n  const gridLayout = 'tiles';\n  const hasOverflow = narrow && article.title.length > 35;\n  const imageSource = narrow ? article.hero.narrow : article.hero.regular;\n  const hasHeroImage =\n    imageSource &&\n    Object.keys(imageSource).length !== 0 &&\n    imageSource.constructor === Object;\n\n  return (\n    <ArticleLink to={article.slug} data-a11y=\"false\">\n      <Item gridLayout={gridLayout}>\n        <ImageContainer narrow={narrow} gridLayout={gridLayout}>\n          {hasHeroImage ? <Image src={imageSource} /> : <ImagePlaceholder />}\n        </ImageContainer>\n        <ArticleContent\n          gridLayout={gridLayout}>\n          <ArticleTaxonomy\n            gridLayout={gridLayout}>\n            <span className=\"Article__Categories\">{article.categories}</span>\n            <span className=\"Article__Topics\">{article.topic}</span>\n          </ArticleTaxonomy>\n          <Title dark hasOverflow={hasOverflow} gridLayout={gridLayout}>\n            {article.title}\n          </Title>\n          {/*<Excerpt*/}\n          {/*  narrow={narrow}*/}\n          {/*  hasOverflow={hasOverflow}*/}\n          {/*  gridLayout={gridLayout}*/}\n          {/*>*/}\n          {/*  {article.excerpt}*/}\n          {/*</Excerpt>*/}\n          <MetaData\n            gridLayout={gridLayout}>\n            <span className=\"Article__Date\">{article.date}</span> &bull; &nbsp;\n            <span className=\"Article__TimeToRead\">{article.timeToRead} min read</span>\n          </MetaData>\n        </ArticleContent>\n      </Item>\n    </ArticleLink>\n  );\n};\n\nconst wide = '1fr';\nconst narrow = '457px';\n\nconst limitToTwoLines = css`\n  text-overflow: ellipsis;\n  overflow-wrap: normal;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  //display: -webkit-box;\n  display: inline;\n  white-space: normal;\n  overflow: hidden;\n  //min-height: 84px;\n  margin-bottom: 25px;\n\n  ${mediaqueries.phablet`\n    -webkit-line-clamp: 3;\n  `}\n`;\n\nconst showDetails = css`\n  p {\n    display: -webkit-box;\n  }\n\n  h2 {\n    margin-bottom: 10px;\n  }\n`;\n\nconst ArticlesListContainer = styled.div<{ alwaysShowAllDetails?: boolean }>`\n  transition: opacity 0.25s;\n  ${p => p.alwaysShowAllDetails && showDetails}\n`;\n\nconst listTile = p => css`\n  position: relative;\n  display: grid;\n  grid-template-columns: ${p.reverse\n    ? `${narrow} ${wide}`\n    : `${wide} ${narrow}`};\n  grid-template-rows: 2;\n  column-gap: 30px;\n\n  &:not(:last-child) {\n    margin-bottom: 35px;\n  }\n\n  ${mediaqueries.desktop_medium`\n    grid-template-columns: 1fr 1fr;\n  `}\n\n  ${mediaqueries.tablet`\n    grid-template-columns: 1fr;\n\n    &:not(:last-child) {\n      margin-bottom: 0;\n    }\n  `}\n`;\n\nconst listItemRow = p => css`\n  display: grid;\n  grid-template-rows: 1fr;\n  //grid-template-columns: 1fr 488px;\n  //grid-column-gap: 96px;\n  grid-template-columns: 1fr 570px;\n  grid-column-gap: 0;\n  grid-template-rows: 1;\n  align-items: center;\n  position: relative;\n  margin-bottom: 50px;\n\n  ${mediaqueries.desktop`\n    grid-column-gap: 24px;\n    grid-template-columns: 1fr 380px;\n  `}\n\n  ${mediaqueries.tablet`\n    grid-template-columns: 1fr;\n  `}\n\n  @media (max-width: 540px) {\n    background: ${p.theme.colors.card};\n  }\n\n  ${mediaqueries.phablet`\n    //box-shadow: 0px 20px 40px rgba(0, 0, 0, 0.2);\n    border-bottom-right-radius: 5px;\n    border-bottom-left-radius: 5px;\n    margin-bottom: 30px;\n  `}\n`;\n\nconst listItemTile = p => css`\n  position: relative;\n\n  ${mediaqueries.tablet`\n    margin-bottom: 60px;\n  `}\n\n  @media (max-width: 540px) {\n    background: ${p.theme.colors.card};\n  }\n\n  ${mediaqueries.phablet`\n    margin-bottom: 40px;\n    //box-shadow: 0px 20px 40px rgba(0, 0, 0, 0.2);\n    border-bottom-right-radius: 5px;\n    border-bottom-left-radius: 5px;\n  `}\n`;\n\n// If only 1 article, dont create 2 rows.\nconst listRow = p => css`\n  display: grid;\n  grid-template-rows: ${p.hasOnlyOneArticle ? '1fr' : '1fr 1fr'};\n`;\n\nconst List = styled.div<{\n  reverse: boolean;\n  gridLayout: string;\n  hasOnlyOneArticle: boolean;\n}>`\n  ${p => (p.gridLayout === 'tiles' ? listTile : listRow)}\n`;\n\nconst Item = styled.div<{ gridLayout: string }>`\n  ${p => (p.gridLayout === 'rows' ? listItemRow : listItemTile)}\n`;\n\nconst ImageContainer = styled.div<{ narrow: boolean; gridLayout: string }>`\n  position: relative;\n  height: ${p => (p.gridLayout === 'tiles' ? '280px' : '220px')};\n  //box-shadow: 0 30px 60px -10px rgba(0, 0, 0, ${p => (p.narrow ? 0.22 : 0.3)}),\n    0 18px 36px -18px rgba(0, 0, 0, ${p => (p.narrow ? 0.25 : 0.33)});\n  //margin-bottom: ${p => (p.gridLayout === 'tiles' ? '30px' : 0)};\n  overflow: hidden;\n  z-index: 300;\n  display: block;\n\n  & > div {\n    height: 100%;\n    transition: transform 0.3s var(--ease-out-quad),\n    scale 0.3s var(--ease-out-quad);\n  }\n\n  ${mediaqueries.tablet`\n    height: 200px;\n    //margin-bottom: 35px;\n  `}\n\n  ${mediaqueries.phablet`\n    overflow: hidden;\n    margin-bottom: 0;\n    box-shadow: none;\n    //border-top-right-radius: 5px;\n    //border-top-left-radius: 5px;\n  `}\n`;\n\nconst Title = styled(Headings.h2)`\n  font-size: 32px;\n  font-weight: 400;\n  font-family: ${p => p.theme.fonts.serif};\n  margin-bottom: ${p =>\n    p.hasOverflow && p.gridLayout === 'tiles' ? '25px' : '10px'};\n  //transition: color 0.3s ease-in-out;\n  ${limitToTwoLines};\n  background-size: 0 100%;\n  background-repeat: no-repeat;\n  text-decoration: none;\n  -webkit-transition: background-size .8s ease;\n  transition: background-size .8s ease;\n  background-image: -webkit-gradient(linear,left top,left bottom,color-stop(99%,transparent),color-stop(1%,${p => p.theme.colors.primary}));\n  background-image: linear-gradient(180deg,transparent 99%,${p => p.theme.colors.primary} 0);\n\n  ${mediaqueries.desktop`\n    margin-bottom: 15px;\n  `}\n\n  ${mediaqueries.tablet`\n    font-size: 24px;\n  `}\n\n  ${mediaqueries.phablet`\n    font-size: 22px;\n    padding: 0;\n    margin-bottom: 10px;\n    -webkit-line-clamp: 3;\n  `}\n`;\n\nconst Excerpt = styled.p<{\n  hasOverflow: boolean;\n  narrow: boolean;\n  gridLayout: string;\n}>`\n  ${limitToTwoLines};\n  display: block;\n  font-style: italic;\n  font-size: 18px;\n  line-height: 32px;\n  font-family: ${p => p.theme.fonts.serif};\n  margin-bottom: 15px;\n  color: ${p => p.theme.colors.grey};\n  display: ${p => (p.hasOverflow && p.gridLayout === 'tiles' ? 'none' : 'box')};\n  max-width: ${p => (p.narrow ? '415px' : '515px')};\n\n  ${mediaqueries.desktop`\n    display: -webkit-box;\n  `}\n\n  ${mediaqueries.phablet`\n    margin-bottom; 15px;\n  `}\n\n  ${mediaqueries.phablet`\n    max-width: 100%;\n    padding:  0 20px;\n    margin-bottom: 20px;\n    -webkit-line-clamp: 3;\n  `}\n`;\n\nconst ArticleContent = styled.div<{\n  gridLayout: string;\n}>`\n  padding: 30px;\n  background: ${p => p.theme.colors.card};\n  //margin:  ${p => (p.gridLayout === 'tiles' ? '-150px 30px 20px 30px' : '110px 0 -30px -100px')};\n  z-index: 600;\n  display: block;\n  position: relative;\n\n  ${mediaqueries.tablet`\n    margin: 0 auto;\n    width: 100%;\n  `}\n`;\n\nconst MetaData = styled.div<{\n  gridLayout: string;\n}>`\n  font-weight: 400;\n  font-size: 16px;\n  color: ${p => p.theme.colors.lightGrey};\n  margin-top: ${p => (p.gridLayout === 'tiles' ? '20px' : '10px')};;\n  //opacity: 0.5;\n  //font-style: italic;\n\n  ${mediaqueries.phablet`\n    max-width: 100%;\n    padding: 0;\n  `}\n`;\n\nconst ArticleTaxonomy = styled.div<{\n  gridLayout: string;\n}>`\n  font-weight: 600;\n  font-size: 12px;\n  font-family: ${p => p.theme.fonts.sansSerif};\n  color: ${p => p.theme.colors.primary};\n  text-transform: uppercase;\n  opacity: 0.8;\n  letter-spacing: 2px;\n  margin-bottom: ${p => (p.gridLayout === 'tiles' ? '20px' : '10px')};\n  text-overflow: ellipsis;\n  overflow-wrap: normal;\n  -webkit-line-clamp: 1;\n  -webkit-box-orient: vertical;\n  display: -webkit-box;\n  white-space: normal;\n  overflow: hidden;\n\n\n  .Article__Categories{\n    margin-right: 5px;\n    color: ${p => p.theme.colors.lightGrey};\n    margin-left: 1px;\n  }\n  .Article__Topics{\n  }\n\n  ${mediaqueries.phablet`\n    max-width: 100%;\n    padding: 0;\n  `}\n`;\n\nconst ArticleLink = styled(Link)`\n  position: relative;\n  display: block;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  transition: transform 0.33s var(--ease-out-quart);\n  -webkit-tap-highlight-color: rgba(255, 255, 255, 0);\n  //border-bottom: 5px solid ${p => p.theme.colors.primary};\n\n  &:hover ${ImageContainer} > div, &:focus ${ImageContainer} > div{\n    //transform: translateY(-1px);\n    //box-shadow: 0 50px 80px -20px rgba(0, 0, 0, 0.27),\n      0 30px 50px -30px rgba(0, 0, 0, 0.3);\n    transform: scale(1.1);\n  }\n\n  &:hover h2,\n  &:focus h2 {\n    //color: ${p => p.theme.colors.accent};\n    background-size: 100% 100%;\n    cursor: pointer;\n  }\n\n  &[data-a11y='true']:focus::after {\n    content: '';\n    position: absolute;\n    left: -1.5%;\n    top: -2%;\n    width: 103%;\n    height: 104%;\n    border: 3px solid ${p => p.theme.colors.accent};\n    background: rgba(255, 255, 255, 0.01);\n    //border-radius: 5px;\n  }\n\n  ${mediaqueries.phablet`\n    &:hover ${ImageContainer} {\n      transform: none;\n      //box-shadow: initial;\n    }\n\n    &:active {\n      transform: scale(0.97) translateY(3px);\n    }\n  `}\n`;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nimport Section from \"@components/Section\";\nimport SEO from \"@components/SEO\";\nimport Layout from \"@components/Layout\";\nimport Paginator from \"@components/Navigation/Navigation.Paginator\";\n\nimport TopicHero from \"../sections/topic/Topic.Hero\";\nimport TopicArticles from \"../sections/topic/Topic.Articles\";\nimport TopicsHero from \"../sections/topics/Topics.Hero\";\n\nimport { Template } from \"@types\";\n\nconst ArticlesPage: Template = ({ location, pageContext }) => {\n  const topic = pageContext.additionalContext.topic;\n  const topics = pageContext.additionalContext.topics;\n  const articles = pageContext.group;\n\n  return (\n    <Layout>\n      <SEO\n        pathname={location.pathname}\n        title={topic.name}\n        description={topic.bio}\n      />\n      <TopicsHero topics={topics} topic={topic} />\n      <Section narrow>\n        {/*<TopicHero topic={topic} />*/}\n        <TopicArticles articles={articles} />\n        <TopicPaginator>\n          <Paginator {...pageContext} />\n        </TopicPaginator>\n      </Section>\n      {/*<TopicsGradient />*/}\n    </Layout>\n  );\n};\n\nexport default ArticlesPage;\n\nconst TopicsGradient = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 590px;\n  z-index: 0;\n  pointer-events: none;\n  background: ${p => p.theme.colors.gradient};\n  transition: ${p => p.theme.colorModeTransition};\n`;\n\nconst TopicPaginator = styled.div`\n  text-align: center;\n`;\n","import React, { useState } from 'react';\nimport { Link } from 'gatsby';\nimport styled from '@emotion/styled';\nimport OutsideClickHandler from \"react-outside-click-handler\";\nimport { useColorMode } from \"theme-ui\";\n\nimport Image from '@components/Image';\nimport { ITopic } from '@types';\nimport Icons from \"@icons\";\nimport mediaqueries from \"@styles/media\";\n\nconst TopicsList: React.FC<ITopic> = ({ topics, selectedTopic }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [colorMode] = useColorMode();\n\n  const fill = colorMode === \"dark\" ? \"#fff\" : \"#000\";\n\n  const hasSelectedTopic = Object.keys(selectedTopic).length;\n\n  const topicsBlank = {\n    id: 0,\n    name: 'all topics I write about',\n    avatar: '',\n    bio: '',\n    slug: '/blog',\n    topicsPage: true,\n    featured: false,\n    color: ''\n  };\n\n  const topicsWithDefaultAll = [ topicsBlank, ...topics ];\n\n  return (\n    <TopicsContainer onClick={() => setIsOpen(!isOpen)} isOpen={isOpen}>\n      {/*{ selectedTopic.avatar &&*/}\n      {/*  <TopicBackground src={selectedTopic.avatar.large} />*/}\n      {/*}*/}\n      <CoTopicsList /*style={listWidth}*/>\n        {/*{topics.map((topic, index) => (*/}\n        {/*  <CoTopicAvatar style={{ left: `${index * 15}px` }} key={topic.name}>*/}\n        {/*    <RoundedImage src={topic.avatar.small} />*/}\n        {/*  </CoTopicAvatar>*/}\n        {/*))}*/}\n      </CoTopicsList>\n      <NameContainer>{ hasSelectedTopic ? selectedTopic.name : topicsBlank.name}</NameContainer>\n      <IconContainer>\n        <Icons.ToggleOpen fill={fill} />\n      </IconContainer>\n\n\n      {isOpen && (\n        <OutsideClickHandler onOutsideClick={() => setIsOpen(!isOpen)}>\n          <CoTopicsListOpen>\n            <IconOpenContainer>\n              <Icons.ToggleClose fill={fill} />\n            </IconOpenContainer>\n            {topicsWithDefaultAll.map((topic, index) => (\n              <CoTopicsListItemOpen key={topic.name}>\n                <TopicLink\n                  as={topic.topicsPage ? Link : \"div\"}\n                  to={topic.slug}\n                >\n                  {/*<CoTopicAvatarOpen>*/}\n                  {/*  <RoundedImage src={topic.avatar.small} />*/}\n                  {/*</CoTopicAvatarOpen>*/}\n                  <TopicNameOpen>{topic.name}</TopicNameOpen>\n                </TopicLink>\n              </CoTopicsListItemOpen>\n            ))}\n          </CoTopicsListOpen>\n        </OutsideClickHandler>\n      )}\n\n      {/*{topics.map((topic, index) => {*/}\n      {/*  //return console.log('topic', topic);*/}\n      {/*  console.log('topic.color', topic.color);*/}\n      {/*  return (*/}\n      {/*    <TopicContainer key={index} color={topic.color}>*/}\n      {/*      <TopicsAvatar*/}\n      {/*        as={topic.topicsPage ? Link : 'div'}*/}\n      {/*        to={topic.slug}*/}\n      {/*      >*/}\n      {/*        <TopicsAvatarInner>*/}\n      {/*          <RoundedImage*/}\n      {/*            isEven={index % 2 == 0}*/}\n      {/*            src={topic.avatar.large}*/}\n      {/*          />*/}\n      {/*        </TopicsAvatarInner>*/}\n      {/*      </TopicsAvatar>*/}\n      {/*      <div>*/}\n      {/*        { topic.id == selectedTopic.id ? 'SELECTED TOPIC' : 'not selected'}*/}\n      {/*      </div>*/}\n      {/*      <TopicsText dangerouslySetInnerHTML={{ __html: topic.name }} />*/}\n      {/*    </TopicContainer>*/}\n      {/*  );*/}\n      {/*})}*/}\n    </TopicsContainer>\n  );\n};\n\nexport default TopicsList;\n\n// const TopicsContainer = styled.div`\n//   width: 100%;\n//   display: grid;\n//   grid-gap: 16px;\n//   //grid-template-columns: repeat(auto-fill,minmax(150px,215px));\n//   //grid-template-columns: repeat(auto-fill,minmax(200px,365px));\n//   grid-template-columns: repeat(auto-fill,minmax(250px,265px));\n//   justify-content: center;\n// `;\n\nconst TopicsContainer = styled.div<{ isOpen: boolean }>`\n  position: relative;\n  //display: flex;\n  display: inline-block;\n  align-items: center;\n  //font-size: 18px;\n  color: ${p => p.theme.colors.grey};\n  letter-spacing: 1px;\n  cursor: pointer;\n  vertical-align: middle;\n\n  &::before {\n    content: \"\";\n    position: absolute;\n    left: -20px;\n    right: -20px;\n    top: -16px;\n    bottom: -16px;\n    background: ${p => p.theme.colors.card};\n    box-shadow: ${p =>\n  p.isOpen ? \"none\" : \" 0px 0px 15px rgba(0, 0, 0, 0.1)\"};\n    border-radius: 5px;\n    z-index: 0;\n    transition: opacity 0.3s;\n    cursor: pointer;\n    opacity: 0;\n  }\n\n  &:hover::before {\n    opacity: 1;\n  }\n\n\n  ${mediaqueries.phablet`\n    //font-size: 14px;\n    align-items: center;\n\n    &::before {\n      box-shadow: none;\n      bottom: -30px;\n      background: transparent;\n    }\n\n    strong {\n      display: block;\n      font-weight: semi-bold;\n      margin-top: 6px;\n    }\n  `}\n`;\n\nconst TopicContainer = styled.div<{ color: string }>`\n  position: relative;\n  display: flex;\n  height: 304px;\n  cursor: pointer;\n  flex-direction: column;\n  justify-content: flex-end;\n  align-items: center;\n  border-radius: 7px;\n  padding: 24px 0;\n  background-color: #${p => p.color};\n  background-repeat: no-repeat;\n  background-size: 100%;\n  border: 1px solid rgba(29,29,29,.1);\n  overflow: hidden;\n`;\n\nconst TopicsAvatar = styled.div`\n  display: block;\n  position: relative;\n  height: 100%;\n  width: 100%;\n\n  &[data-a11y='true']:focus::after {\n    content: '';\n    position: absolute;\n    left: -5px;\n    top: -5px;\n    width: 50px;\n    height: 50px;\n    border: 2px solid ${p => p.theme.colors.accent};\n  }\n`;\n\nconst RoundedImage = styled(Image)<{ isEven: boolean }>`\n  height: 180px;\n\n  img {\n    object-position: ${p => p.isEven ? `left` : `right`} !important;\n    //object-position: right !important;\n  }\n`;\n\nconst TopicBackground = styled(Image)<{ isEven: boolean }>`\n  width: 300px;\n  position: absolute !important;\n  left: -20vw;\n  top: -30px;\n  z-index: 0;\n  display: block;\n  filter: grayscale(100%);\n}\n`;\n\nconst TopicsAvatarInner = styled.div`\n  height: 100%;\n  overflow: hidden;\n`;\n\nconst TopicsText = styled.p`\n  max-width: 430px;\n  font-size: 16px;\n  margin-bottom: 20px;\n  text-transform: uppercase;\n  text-align: left;\n  padding: 0 60px 0 30px;\n  font-weight: bold;\n  display: block;\n  //opacity: 0.5;\n  line-height: 1.45;\n  font-family: ${p => p.theme.fonts.sansSerif};\n  //color: ${p => p.theme.colors.grey};\n\n  a {\n    //color: ${p => p.theme.colors.grey};\n    text-decoration: underline;\n  }\n`;\n\n\nconst NameContainer = styled.strong`\n  position: relative;\n  //max-width: 260px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  cursor: pointer;\n  //font-family: ${p => p.theme.fonts.sansSerif};\n  color: ${p => p.theme.colors.primary};\n  border-bottom: 5px solid;\n  //text-transform: uppercase;\n  //font-size: 14px;\n  font-weight: 400;\n  display: inline-block;\n  margin-top: 4px;\n  vertical-align: middle;\n\n  // ${mediaqueries.desktop`\n  //   max-width: 170px;\n  // `}\n  //\n  // ${mediaqueries.phablet`\n  //   max-width: 200px;\n  // `}\n`;\n\nconst IconContainer = styled.div`\n  position: relative;\n  cursor: pointer;\n  margin-left: 10px;\n  display: inline-block;\n\n  svg{\n    width: 30px;\n    height: 30px;\n  }\n\n  ${mediaqueries.phablet`\n    position: absolute;\n    right: -30px;\n    bottom: 0px;\n    top: 3px;\n    height: 100%;\n  `}\n`;\n\nconst IconOpenContainer = styled.div`\n  position: absolute;\n  cursor: pointer;\n  top: -10px;\n  right: 21px;\n\n  ${mediaqueries.desktop`\n    top: 10px;\n  `}\n\n  ${mediaqueries.phablet`\n    top: 20px;\n  `}\n\n  svg {\n    width: 30px;\n    height: 30px;\n  }\n`;\n\n\nconst CoTopicsList = styled.div`\n  position: relative;\n  //height: 25px;\n  //margin-right: 15px;\n  width: auto;\n  min-width: 300px;\n\n  ${mediaqueries.phablet`\n    display: none;\n  `}\n`;\n\n\nconst CoTopicsListOpen = styled.ul`\n  position: absolute;\n  z-index: 2;\n  left: -21px;\n  right: -21px;\n  top: 105px;\n  padding: 50px;\n  background: ${p => p.theme.colors.card};\n  box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);\n  border-radius: 5px;\n  cursor: pointer;\n  list-style: none;\n  transform: translateY(-2px);\n  max-height: 500px;\n  overflow-y: scroll;\n  display: grid;\n  width: 100%;\n  grid-gap: 16px;\n  grid-template-columns: repeat(auto-fill,minmax(150px,300px));\n\n  ${mediaqueries.desktop`\n    display: block;\n    left: 0;\n  `}\n\n  ${mediaqueries.phablet`\n    width: 280px;\n  `}\n`;\n\nconst CoTopicsListItemOpen = styled.li`\n  a {\n    width: 100%;\n  }\n\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nconst CoTopicAvatarOpen = styled.div`\n  height: 25px;\n  width: 25px;\n  border-radius: 50%;\n  margin-right: 15px;\n  background: ${p => p.theme.colors.grey};\n  overflow: hidden;\n  pointer-events: none;\n\n  .gatsby-image-wrapper > div {\n    padding-bottom: 100% !important;\n    overflow: hidden;\n  }\n`;\n\nconst CoTopicAvatar = styled.div`\n  position: absolute;\n  height: 25px;\n  width: 25px;\n  border-radius: 50%;\n  z-index: 1;\n  background: ${p => p.theme.colors.grey};\n  box-shadow: 0 0 0 2px ${p => p.theme.colors.background};\n  transition: box-shadow 0.25s ease;\n  overflow: hidden;\n  pointer-events: none;\n\n  .gatsby-image-wrapper > div {\n    padding-bottom: 100% !important;\n    overflow: hidden;\n  }\n\n  ${mediaqueries.phablet`\n    display: none;\n  `}\n`;\n\nconst TopicLink = styled.div`\n  display: flex;\n  align-items: center;\n  color: inherit;\n  margin-left: 10px;\n  letter-spacing: 1px;\n\n  strong {\n    transition: ${p => p.theme.colorModeTransition};\n  }\n\n  &:hover strong {\n    color: ${p => p.theme.colors.primary};\n  }\n`;\n\nconst TopicNameOpen = styled.strong`\n  position: relative;\n  cursor: pointer;\n  color: ${p => p.theme.colors.secondary};\n  font-weight: 400;\n  font-size: 16px;\n  font-family: ${p => p.theme.fonts.sansSerif};\n  color: ${p => p.theme.colors.primary};\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  padding-bottom: 3px;\n\n  &:hover{\n    padding-bottom: 1px;\n    border-bottom: 1px solid ${p => p.theme.colors.primary};\n  }\n`;\n\n","import React, { useContext } from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport styled from '@emotion/styled';\n\nimport Section from '@components/Section';\nimport Bio from '@components/Bio';\nimport Topics from '@components/Topics';\nimport TopicsList from '@components/TopicsList';\nimport Icons from '@icons';\nimport mediaqueries from '@styles/media';\nimport { ITopic } from '@types';\n\nimport { GridLayoutContext } from '../articles/Articles.List.Context';\n\nconst topicQuery = graphql`\n  {\n    site: allSite {\n      edges {\n        node {\n          siteMetadata {\n            hero {\n              heading\n              maxWidth\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst TopicsHero: React.FC<ITopic> = ({ topics, topic }) => {\n  const { gridLayout = 'tiles', hasSetGridLayout, setGridLayout } = useContext(\n    GridLayoutContext,\n  );\n\n\n  const results = useStaticQuery(topicQuery);\n  const hero = results.site.edges[0].node.siteMetadata.hero;\n  const tilesIsActive = hasSetGridLayout && gridLayout === 'tiles';\n  //const featuredTopic = topics.find(topic => topic.featured);\n\n  // if (!featuredTopic) {\n  //   throw new Error(`\n  //     No featured Topic found.\n  //     Please ensure you have at least featured Topic.\n  // `);\n  // }\n\n  return (\n    <Section relative id=\"Articles__Hero\">\n      <HeadingContainer>\n        {/*<HeroHeading dangerouslySetInnerHTML={{ __html: 'Explore topics I post about' }} />*/}\n        <HeroHeading>\n          <HeroHeadingLabel>Explore</HeroHeadingLabel>\n          <TopicsList topics={topics} selectedTopic={topic} />\n        </HeroHeading>\n      </HeadingContainer>\n      {/*<SubheadingContainer>*/}\n        {/*<Topics topics={topics} />*/}\n        {/*<GridControlsContainer>*/}\n        {/*  <GridButton*/}\n        {/*    onClick={() => setGridLayout('tiles')}*/}\n        {/*    active={tilesIsActive}*/}\n        {/*    data-a11y=\"false\"*/}\n        {/*    title=\"Show articles in Tile grid\"*/}\n        {/*    aria-label=\"Show articles in Tile grid\"*/}\n        {/*  >*/}\n        {/*    <Icons.Tiles />*/}\n        {/*  </GridButton>*/}\n        {/*  <GridButton*/}\n        {/*    onClick={() => setGridLayout('rows')}*/}\n        {/*    active={!tilesIsActive}*/}\n        {/*    data-a11y=\"false\"*/}\n        {/*    title=\"Show articles in Row grid\"*/}\n        {/*    aria-label=\"Show articles in Row grid\"*/}\n        {/*  >*/}\n        {/*    <Icons.Rows />*/}\n        {/*  </GridButton>*/}\n        {/*</GridControlsContainer>*/}\n      {/*</SubheadingContainer>*/}\n    </Section>\n  );\n};\n\nexport default TopicsHero;\n\nconst SubheadingContainer = styled.div`\n  // display: flex;\n  // align-items: center;\n  // justify-content: space-between;\n  // margin-bottom: 100px;\n  padding: 20px 0;\n\n  ${mediaqueries.desktop`\n    margin-bottom: 80px;\n  `};\n\n  ${mediaqueries.tablet`\n    margin-bottom: 60px;\n  `};\n\n  ${mediaqueries.phablet`\n    display: none;\n  `};\n`;\n\nconst GridControlsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 110px;\n  margin: 0 auto;\n\n  ${mediaqueries.tablet`\n    display: none;\n  `};\n`;\n\nconst HeadingContainer = styled.div`\n  margin: 80px 0 90px 0;\n  display: inline-block;\n\n  ${mediaqueries.desktop`\n    width: 80%;\n  `}\n\n  ${mediaqueries.tablet`\n    width: 100%;\n  `}\n\n  ${mediaqueries.phablet`\n    margin: 60px 0 80px 0;\n  `}\n`;\n\nconst HeroHeading = styled.h1`\n  font-style: normal;\n  font-weight: 400;\n  font-size: 80px;\n  line-height: 1.15;\n  color: ${p => p.theme.colors.primary};\n  vertical-align: middle;\n  display: table-cell;\n\n  a {\n    color: ${p => p.theme.colors.accent};\n  }\n\n  ${mediaqueries.desktop`\n    font-size: 38px\n  `}\n\n  ${mediaqueries.phablet`\n    font-size: 24px;\n  `}\n`;\n\nconst HeroHeadingLabel = styled.span`\n   vertical-align: middle;\n   margin-right: 15px;\n\n  ${mediaqueries.phablet`\n    margin-right: 8px;\n    display: block;\n  `}\n`;\n\nconst GridButton = styled.button<{ active: boolean }>`\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 36px;\n  width: 36px;\n  border-radius: 50%;\n  background: transparent;\n  transition: background 0.25s;\n\n  &:not(:last-child) {\n    margin-right: 30px;\n  }\n\n  &:hover {\n    background: ${p => p.theme.colors.hover};\n  }\n\n  &[data-a11y='true']:focus::after {\n    content: '';\n    position: absolute;\n    left: -10%;\n    top: -10%;\n    width: 120%;\n    height: 120%;\n    border: 2px solid ${p => p.theme.colors.accent};\n    background: rgba(255, 255, 255, 0.01);\n    border-radius: 50%;\n  }\n\n  svg {\n    opacity: ${p => (p.active ? 1 : 0.25)};\n    transition: opacity 0.2s;\n\n    path {\n      fill: ${p => p.theme.colors.primary};\n    }\n  }\n`;\n","import React, { Component } from \"react\";\nimport styled from \"@emotion/styled\";\nimport { css } from \"@emotion/core\";\nimport { Link } from \"gatsby\";\nimport { Helmet } from \"react-helmet\";\n\nimport mediaqueries from \"@styles/media\";\nimport { range } from \"@utils\";\n\nimport { IPaginator } from \"@types\";\n\n/**\n * <Paginator />\n *\n * 1 2 3 ... final page NEXT\n * Component to navigate between different pages on a series of blog post, for example.\n *\n * We're using a <nav> element here so make sure to put the pagination component\n * INSIDE of a section to make sure the markup stays contextually relevant\n *\n * Receives the gatsby-paginator props\n */\n\nclass Paginator extends Component<IPaginator, {}> {\n  maxPages = 3;\n  count = this.props.pageCount;\n  current = this.props.index;\n  pageRoot = this.props.pathPrefix;\n\n  get nextPath() {\n    return this.getFullPath(this.current + 1);\n  }\n\n  get previousPath() {\n    return this.getFullPath(this.current - 1);\n  }\n\n  /**\n   * Utility function to return a 1 ... 5 6 7 ... 10 style pagination\n   */\n  get getPageLinks() {\n    const current = this.current;\n    const count = this.count;\n    const maxPages = this.maxPages;\n\n    // Current is the page we're on\n    // We want to show current - 1, current, current + 1\n    // Of course if we're on page 1, we don't want a page 0\n    const previousPage = current === 1 ? current : current - 1;\n\n    // Now create a range of numbers from the previousPage to the total pages (count)\n    const pagesRange = range(previousPage, count + 1 - previousPage);\n\n    // We might need to truncate that pagesRange if it's\n    // more than the max pages we wish to display (3)\n    const truncatedRange: Array<number | null> = pagesRange.slice(0, maxPages);\n\n    // Throughout this function we might add a null to our pages range.\n    // When it comes to rendering our range if we find a null we'll add a spacer.\n\n    // We might need a spacer at the start of the pagination e.g. 1 ... 3 4 5 etc.\n    // If we're after the second page, we need a ... spacer (3 and up)\n    if (pagesRange[0] > 2) {\n      truncatedRange.unshift(null);\n    }\n    // If we're after the first page, we need page 1 to appear (2 and up)\n    if (pagesRange[0] > 1) {\n      truncatedRange.unshift(1);\n    }\n\n    // If we're on the final page, then there won't be a \"next\" page and\n    // the pagination will end up looking a bit short (e.g. on 8 pages ... 7, 8)\n    // Push to the end an extra page maxPages from the end\n    if (pagesRange[0] + 1 === count && pagesRange[0] - 1 > 0) {\n      truncatedRange.splice(\n        pagesRange.length - 1 - maxPages,\n        0,\n        pagesRange[0] - 1,\n      );\n    }\n\n    // We might need a spacer at the end of the pagination e.g. 4 5 6 ... 8\n    // If we're before the penultimate page, we need a ... spacer\n    if (pagesRange[0] + maxPages < count) {\n      truncatedRange.push(null);\n    }\n\n    // If we're before the last page, we need page <last> to appear\n    if (pagesRange[0] + maxPages - 1 < count) {\n      truncatedRange.push(count);\n    }\n\n    return [...new Set(truncatedRange)].map((page: number | null, i) =>\n      page === null ? (\n        // If you find a null in the truncated array then add a spacer\n        <Spacer key={`PaginatorPage_spacer_${i}`} aria-hidden={true} />\n      ) : (\n        // Otherwise render a PageButton\n        <PageNumberBUtton\n          key={`PaginatorPage_${page}`}\n          to={this.getFullPath(page)}\n          style={{ opacity: current === page ? 1 : 0.3 }}\n          className=\"Paginator__pageLink\"\n        >\n          {page}\n        </PageNumberBUtton>\n      ),\n    );\n  }\n\n  /**\n   * Utility to turn an index in to a page path.\n   * All it really does is glue the page path to the front,\n   * but note there's special behaviour for page 1 where the URL should be / not /page/1\n   */\n  getFullPath = (n: number) => {\n    if (this.pageRoot === \"/\") {\n      return n === 1 ? this.pageRoot : this.pageRoot + \"page/\" + n;\n    } else {\n      return n === 1 ? this.pageRoot : this.pageRoot + \"/page/\" + n;\n    }\n  };\n\n  render() {\n    const count = this.count;\n    const current = this.current;\n\n    if (count <= 1) return null;\n\n    const previousPath = this.previousPath;\n    const nextPath = this.nextPath;\n    const hasNext = this.current < this.count;\n    const hasPrevious = this.current > 1;\n\n    return (\n      <>\n        <Helmet>\n          {hasPrevious && <link rel=\"prev\" href={previousPath} />}\n          {hasNext && <link rel=\"next\" href={nextPath} />}\n        </Helmet>\n        <Frame>\n          {hasPrevious && <PageButton to={previousPath}>Prev</PageButton>}\n          {this.getPageLinks}\n          <MobileReference aria-hidden=\"true\">\n            <em>{current}</em>&nbsp;of {count}\n          </MobileReference>\n          {hasNext && <PageButton to={nextPath}>Next</PageButton>}\n        </Frame>\n      </>\n    );\n  }\n}\n\nexport default Paginator;\n\nconst paginationItemMixin = p => css`\n  line-height: 1;\n  color: ${p.theme.colors.primary};\n  padding: 0;\n  width: 6.8rem;\n  height: 6.8rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-variant-numeric: tabular-nums;\n\n  ${mediaqueries.desktop_up`\n    display: block;\n    width: auto;\n    height: auto;\n    padding: 2rem;\n\n    &:first-of-type {\n      padding-left: 0;\n    }\n\n    &:last-child {\n      padding-right: 0;\n    }\n  `}\n`;\n\nconst PageButton = styled(Link)`\n  font-weight: 600;\n  font-size: 16px;\n  text-decoration: none;\n  font-family: ${p => p.theme.fonts.sansSerif};\n  text-transform: uppercase;\n  letter-spacing: 3px;\n  color: ${p => p.theme.colors.primary};\n  ${paginationItemMixin}\n\n  &:hover,\n  &:focus {\n    opacity: 1;\n    text-decoration: underline;\n  }\n`;\n\nconst PageNumberBUtton = styled(Link)`\n  font-weight: 400;\n  font-size: 18px;\n  text-decoration: none;\n  color: ${p => p.theme.colors.primary};\n  ${paginationItemMixin}\n\n  &:hover,\n  &:focus {\n    opacity: 1;\n    text-decoration: underline;\n  }\n`;\n\nconst Spacer = styled.span`\n  opacity: 0.3;\n  ${paginationItemMixin}\n  &::before {\n    content: \"...\";\n  }\n`;\n\nconst MobileReference = styled.span`\n  font-weight: 400;\n  ${paginationItemMixin}\n  color: ${p => p.theme.colors.primary};\n\n  em {\n    font-style: normal;\n    color: ${p => p.theme.colors.primary};\n  }\n`;\n\nconst Frame = styled.nav`\n  position: relative;\n  z-index: 1;\n  display: inline-flex;\n  justify-content: space-between;\n  align-items: center;\n\n  ${mediaqueries.tablet`\n    .Paginator__pageLink, ${Spacer} { display: none; }\n    left: -15px;\n  `}\n\n  ${mediaqueries.desktop_up`\n    justify-content: flex-start;\n    ${MobileReference} { display: none; }\n  `}\n`;\n"],"sourceRoot":""}